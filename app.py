# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

!pip install streamlit

import streamlit as st
import pickle
import numpy as np

# Title
st.title("Machine Learning Model Demo")

# Upload model file
uploaded_model = st.file_uploader("Upload your model file (.pkl):", type=["pkl"])

if uploaded_model:
    try:
        # Load the model
        model = pickle.load(uploaded_model)
        st.success("Model uploaded successfully!")

        # Input features
        user_input = st.text_input("Enter features (comma-separated):")

        if st.button("Predict"):
            # Process input
            features = np.array([float(x) for x in user_input.split(",")]).reshape(1, -1)

            # Make prediction
            prediction = model.predict(features)
            st.write(f"Prediction: {prediction[0]}")
    except Exception as e:
        st.error(f"Error loading model: {e}")

streamlit run app.py

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import load_iris
import pickle

# Load dataset
data = load_iris()
X, y = data.data, data.target

# Train model
model = RandomForestClassifier()
model.fit(X, y)

# Save model
with open("model.pkl", "wb") as f:
    pickle.dump(model, f)
print("Model saved as model.pkl")

import pickle

# Load model
with open("model.pkl", "rb") as f:
    loaded_model = pickle.load(f)
print(loaded_model.predict([X[0]]))  # Predict using the loaded model

pip install streamlit

import streamlit as st
import pickle
import numpy as np

# Load the model
with open("model.pkl", "rb") as f:
    loaded_model = pickle.load(f)

# Streamlit app title
st.title("Iris Flower Prediction App")

# User input for features
st.write("Enter the features for the prediction:")

# Input sliders for features
sepal_length = st.number_input("Sepal Length (cm)", min_value=0.0, max_value=10.0, step=0.1)
sepal_width = st.number_input("Sepal Width (cm)", min_value=0.0, max_value=10.0, step=0.1)
petal_length = st.number_input("Petal Length (cm)", min_value=0.0, max_value=10.0, step=0.1)
petal_width = st.number_input("Petal Width (cm)", min_value=0.0, max_value=10.0, step=0.1)

# Prediction button
if st.button("Predict"):
    # Create feature array
    features = np.array([[sepal_length, sepal_width, petal_length, petal_width]])

    # Predict using the loaded model
    prediction = loaded_model.predict(features)
    prediction_label = prediction[0]

    # Output the result
    st.write(f"The predicted class is: {prediction_label}")

